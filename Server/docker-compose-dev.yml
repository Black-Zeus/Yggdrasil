services:
  # =========================
  # NGINX - Reverse Proxy
  # =========================
  nginx:
    container_name: ${PROJECT_NAME}-nginx
    build:
      context: .
      dockerfile: docker/dev/dockerfile.nginx.dev
    image: ${PROJECT_NAME}/nginx:dev.v0.1
    labels:
      - stack=Yggdrasil
    depends_on:
      - frontend
    volumes:
      - ./logs/nginx:/var/log/nginx
      - ./scripts/mixed/:/mixed-script
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - FRONTEND_PORT_INTERNAL=${FRONTEND_PORT_INTERNAL}
      - BACKEND_API_PORT_INTERNAL=${BACKEND_API_PORT_INTERNAL}
    ports:
      - "${NGINX_PORT}:${NGINX_PORT_INTERNAL}"
    networks:
      - internal
      - external
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        
  # =========================
  # FRONTEND - React/NodeJS
  # =========================
  frontend:
    container_name: ${PROJECT_NAME}-frontend
    build:
      context: .
      dockerfile: docker/dev/dockerfile.frontend.dev
    image: ${PROJECT_NAME}/frontend:dev.v0.1
    labels:
      - stack=Yggdrasil
    volumes:
      - ./volumes/frontend:/app
      - /app/node_modules
      - ./logs/frontend:/var/log/app
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT_INTERNAL}"
    command: [ "npm", "run", "dev" ]
    depends_on:
      - backend-api
    environment:
      - ENV=${ENV}
    env_file:
      - ./volumes/frontend/.env
    networks:
      - internal
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # =========================
  # BACKEND API - Api Consultas a Base de Datos
  # =========================
  backend-api:
    container_name: ${PROJECT_NAME}-backend-api
    build:
      context: .
      dockerfile: docker/dev/dockerfile.backend-api
    image: ${PROJECT_NAME}/backend-api:dev.v0.1
    labels:
      - stack=Yggdrasil
    volumes:
      - ./volumes/backend-api:/app
      - ./logs/backend-api:/var/log/app
      - ./scripts/mixed/:/mixed-script
    depends_on:
      mariadb:
        condition: service_healthy
    ports:
      - "${BACKEND_API_PORT}:${BACKEND_API_PORT_INTERNAL}"
    command: uvicorn main:app --host ${BACKEND_API_HOST} --port ${BACKEND_API_PORT_INTERNAL} --reload
    env_file:
      - ./volumes/backend-api/.env
    networks:
      - internal
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # =========================
  # MAILPIT - Mail Testing
  # =========================
  mailpit:
    container_name: ${PROJECT_NAME}-mailpit
    image: axllent/mailpit:v1.21.6
    labels:
      - stack=Yggdrasil
    ports:
      - "${MAILPIT_UI_PORT}:${MAILPIT_UI_PORT}"
      - "${MAILPIT_SMTP_PORT}:${MAILPIT_SMTP_PORT}"
    volumes:
      - ./volumes/mailpit:/data
      - ./logs/mailpit:/var/log/mailpit
    environment:
      MP_STORAGE: ${MAILPIT_STORAGE}
      MP_UI_COLOR: ${MAILPIT_UI_COLOR}
      MP_LOGGING: "true"
    networks:
      - internal
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # =========================
  # MARIADB - Base de Datos
  # =========================
  mariadb:
    container_name: ${PROJECT_NAME}-mariadb
    build:
      context: .
      dockerfile: docker/dockerfile.mysql
    image: ${PROJECT_NAME}/mariadb:10.6
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    labels:
      - stack=Yggdrasil
    volumes:
      - ./volumes/mariadb/db:/var/lib/mysql      
      - ./logs/mariadb:/var/log/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" , "-u", "${MYSQL_USER}","-p${MYSQL_PASSWORD}" ]
      interval: 10s
      retries: 5
      timeout: 5s
    networks:
      - internal
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # =========================
  # PHPMYADMIN - Cliente Web
  # =========================
  phpmyadmin:
    container_name: ${PROJECT_NAME}-phpmyadmin
    image: phpmyadmin:5.2.1
    ports:
      - "${PHPMYADMIN_PORT}:80"
    labels:
      - stack=Yggdrasil
    environment:
      PMA_HOST: ${PROJECT_NAME}-mariadb
      PMA_PORT: ${MYSQL_PORT}
      PMA_USER: ${MYSQL_USER}
      PMA_PASSWORD: ${MYSQL_PASSWORD}
    depends_on:
      - mariadb
    restart: unless-stopped
    networks:
      - internal
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =========================
  # REDIS - Cache
  # =========================
  redis:
    build:
      context: .
      dockerfile: docker/dockerfile.redis
    image: ${PROJECT_NAME}/redis:7.2
    container_name: ${PROJECT_NAME}-redis
    expose:
      - "${REDIS_PORT}"
    labels:
      - stack=Yggdrasil
    volumes:
      - ./volumes/redis/data:/data
      - ./logs/redis:/var/log/redis
      - ./scripts/redis/redis.conf:/etc/redis/redis.conf
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - ${INTERNAL_NETWORK}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      timeout: 5s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"
        reservations:
          cpus: "0.25"
          memory: "128M"

  # =========================
  # REDISINSIGHT - Panel Web para Redis
  # =========================
  redisinsight:
    image: redis/redisinsight:2.66
    container_name: ${PROJECT_NAME}-redisinsight
    ports:
      - "${REDIS_PORT_PANEL}:5540"
    labels:
      - stack=Yggdrasil
    volumes:
      - ./volumes/redisinsight/db:/db
      - ./scripts/redis/connections.json:/db/redisinsight/v2/connections/connections.json
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - ${INTERNAL_NETWORK}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDISINSIGHT_REDIS_URI: "redis://default:${REDIS_PASSWORD}@${PROJECT_NAME}-redis:${REDIS_PORT}/0"
      RI_PRE_SETUP_DATABASES_PATH: "/db/redisinsight/v2/connections/connections.json"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"
        reservations:
          cpus: "0.25"
          memory: "128M"


# =========================
# NETWORKS - Redes Docker
# =========================
networks:
  internal:
    driver: bridge
  external:
    driver: bridge
